{"version":3,"file":"static/js/300.3cebe956.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__uclKr\",\"posts\":\"MyPosts_posts__tK1iR\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__FWGf0\"};","import React from 'react';\r\nimport classes from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n  \r\n  return (\r\n    <div className= { classes.item }>\r\n      <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS_GRnDEllqSKYI4SzrGgy4p7LoVKhsZxdsZQ&usqp=CAU' />\r\n      {props.message}\r\n      <div>\r\n      <span>like</span> { props.likesCount }\r\n      </div>\r\n    </div>)\r\n}\r\n\r\nexport default Post;","import { type } from '@testing-library/user-event/dist/type';\r\nimport React, {Component} from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { addPostActionCreator, updateNewPostTextActionCreator } from '../../../redux/profile-reducer';\r\nimport { MaxLengthCreator, required } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\n\r\n\r\nconst maxLenght10 = MaxLengthCreator(10);\r\n\r\nconst AddNewPostForm = (props) => {\r\n  return <form onSubmit={props.handleSubmit}>\r\n    <div>\r\n      <Field name={\"newPostText\"} component={Textarea} placeholder={\"Post message\"}\r\n        validate={[required, maxLenght10]} />\r\n    </div>\r\n    <div>\r\n      <button>Add post</button>\r\n    </div>\r\n  </form>\r\n\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm({ form: \"ProfileAddNewPostForm\" })(AddNewPostForm)\r\n\r\nconst MyPosts = React.memo(props => {\r\n  \r\n  let postsElements = [...props.posts].reverse().map(posts => <Post key={posts.id} message={posts.message} likesCount={posts.likesCount} />)\r\n\r\n  let newPostElement = React.createRef();\r\n\r\n  let onAddPost = (values) => {\r\n    props.addPost(values.newPostText);\r\n  };\r\n  \r\n  return (\r\n    <div className={classes.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <AddNewPostReduxForm onSubmit={onAddPost} />\r\n      <div className={classes.posts}>\r\n        {postsElements}\r\n      </div>\r\n    </div>)\r\n\r\n});\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addPostActionCreator } from '../../../redux/profile-reducer';\r\nimport store from '../../../redux/redux-store';\r\nimport MyPosts from './MyPosts';\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText\r\n  }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      addPost: (newPostText) => {\r\n        dispatch(addPostActionCreator(newPostText));\r\n      }\r\n  }\r\n}\r\n\r\nconst MyPostsContainer = connect (mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\n\r\nexport default MyPostsContainer;","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__q6BVM\",\"mainPhoto\":\"ProfileInfo_mainPhoto__nlApS\",\"contact\":\"ProfileInfo_contact__CHt0w\"};","import React, { useEffect, useState } from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {//ProfileStatusWithHooks выполняет сначала render потом useEffect\r\n\r\n    let [editMode, setEditMode] = useState(false);//useState это хук изначальное стартовое значение которого будет false(наподобии локального state)\r\n    let [status, setStatus] = useState(props.status);//useState это хук изначальное стартовое значение которого будет props.status(наподобии локального state)\r\n    //editMode, setEditMode это деструктуризация в которые будет входить значения с useState\r\n\r\n    useEffect(() => {//useEffect выполняется после render (в последнюю очередь)\r\n        setStatus(props.status);//синхронизирует useState(state фактически) и приходящие  props\r\n    }, [props.status] );// если [props.status] изменился запусти useEffect в противном случае если [props.status] не будет useEffect будет запускатся после каждого render\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);//мы сообщаем родителю наверх что у нас статус поменялся\r\n    }\r\n\r\n    const onStatusChange = (event) => {\r\n        setStatus(event.currentTarget.value);//передаем значение для статуса\r\n    }\r\n\r\n    console.log(\"render\")\r\n    return (\r\n        <div>\r\n            {!editMode &&//если editMode(false) показываем span\r\n                <div>\r\n                    <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || \"--------\"}</span>\r\n                </div>//показывает span\r\n            }\r\n            {editMode &&// если editMode(true) показываем input\r\n                <div>\r\n                    <input onChange={onStatusChange}\r\n                        autoFocus={true}\r\n                        onBlur={deActivateEditMode}\r\n                        value={status} />\r\n                </div>//autoFocus - курсив в строке input, onBlur кликаем курсором на пустом месте и у нас сетается измененый статус в state, onChange обработчик событий, value значение текущего статуса пользователя\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\n\r\n\r\nclass ProfileStatus extends React.Component {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n\r\n        this.setState({\r\n            editMode: true\r\n        });\r\n    }\r\n\r\n    deActivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n        this.props.updateStatus(this.state.status);\r\n    }\r\n\r\n\r\n    onStatusChange = (event) => {\r\n        this.setState({\r\n            status: event.currentTarget.value\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {//prevProps-предыдущий props, prevState - предыдцщий state\r\n        if (prevProps.status !== this.props.status) {//если предыдущий статус не равен новому статусу то мы в setState закидываем новый статус\r\n            this.setState({\r\n                status: this.props.status\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={this.activateEditMode}>{this.props.status || \"--------\"}</span>\r\n                    </div>\r\n                }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deActivateEditMode} value={this.state.status} />\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;","import React from \"react\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport { createField, Input, Textarea } from \"../../common/FormsControls/FormsControls\";\r\nimport classes from './ProfileInfo.module.css';\r\nimport styles from \"./../../common/FormsControls/FormsControls.module.css\";\r\n\r\n\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {//создаем формы; handleSubmit придет к нам из внешнего мира\r\n    return <form onSubmit={handleSubmit}>\r\n        {<div><button>Save</button></div> //если мы IsOwner отображается button\r\n        }\r\n        {error && <div className={styles.formSummaryError} /* если в props приходит error то мы показываем styles error */>\r\n            {error}\r\n        </div>}\r\n        <div>\r\n            <b>Full name</b>: {createField(\"Full name\", \"fullName\", [], Input)//Надпись в инпуте на заднем фоне, свойство в документации, валидация, тип формы\r\n            }\r\n        </div>\r\n        <div>\r\n            <b>looking for a job</b>: {createField(\" \", \"lookingForAJob\", [], Input, { type: \"checkbox\" })//первая пустая строка так как у нас тип инпута checkbox; помним что createField нужен нам для создания форм а сам createField создается с помощью hoc ProfileDataFormReduxForm созданый reduxForm\r\n            }\r\n        </div>\r\n        <div>\r\n            <b>My professionals skills</b>: {createField(\"My professionals skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Aboute me</b>: {createField(\"Aboute me\", \"aboutMe\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b> : {Object.keys(profile.contacts).map(key => {//Object.keys перебирает все подобьеты profile.contacts и отображает их\r\n                return <div key={key} className={classes.contact}>\r\n                    <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n                </div>//с помощью map на каждое имя свойства мы хотим отрисовать Contact с приходящими props contactTitle(приходит свойство key) contactValue(мы обращаемся к контактам и через квадратные скобки прочитаем значение свойства по етому ключу)\r\n            })//{key} это свойства(масивы) contacts и напротив каждого свойства createField\r\n            }\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({ form: 'edite-profile' })(ProfileDataForm);//создаем hoc который оборачивает нашу компоненту(с помощью его создаем формы)\r\n\r\nexport default ProfileDataFormReduxForm;//импортируем наш hoc","import React, { useState } from 'react';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport classes from './ProfileInfo.module.css';\r\nimport ProfileStatus from \"./ProfileStatus\"\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../assets/images/users.png';\r\nimport ProfileDataForm from './ProfileDataForm';\r\n\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus, IsOwner, savePhoto, SaveProfile }) => {\r\n\r\n  let [editMode, setEditMode] = useState(false);//useState это хук изначальное стартовое значение которого будет false(наподобии локального state)\r\n\r\n  if (!profile) {\r\n    return <Preloader />\r\n  }\r\n\r\n  const onMainPhotoSelected = (event) => {\r\n    if (event.target.files.length) {//если у нас есть фото\r\n      savePhoto(event.target.files[0]);//передаем фото в savePhoto (внешний мир)\r\n    }\r\n  };\r\n\r\n  const onSubmit = (FormData) => {//сюда придут данные из ProfileDataForm\r\n     SaveProfile(FormData).then(() => {// функция асинхронна то есть только после того как она отработает сработает setEditMode\r\n         setEditMode(false)//после того как мы передали наши данные режим редактирования отключается\r\n     })\r\n    }//мы вызываем SaveProfile и передаем в него FormData(наши даные из ProfileDataForm)\r\n\r\n  return (\r\n\r\n    <div>\r\n      <div className={classes.descriptionBlock}>\r\n        <img src={profile.photos.large || userPhoto} className={classes.mainPhoto}//либо фото с бекенда либо userPhoto; либо там true либо тут true  \r\n        />\r\n        {IsOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />//кликая на input type={\"file\"} мы можем выбрать файл; когда будет выбран файл у нас сработает onChange  \r\n        }\r\n        { editMode ?  <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/> : <ProfileData goToEditeMode={ () => {setEditMode(true)} } profile={profile} IsOwner={IsOwner}/> //если editMode true то ProfileDataForm если false то <ProfileData profile={profile}; initialValues={profile} в режиме редактирования присутствуют стартовые значения (ни с чем не связано! только profile)\r\n        } \r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst ProfileData = ({ profile, IsOwner, goToEditeMode  }) => {\r\n  return <div>\r\n     { IsOwner && <div><button onClick={goToEditeMode}>edit</button></div> //если мы IsOwner отображается button\r\n    }\r\n    <div>\r\n      <b>Full name</b> : {profile.fullName}\r\n    </div>\r\n    <div>\r\n      <b>looking for a job</b> : {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n    </div>\r\n    {profile.lookingForAJob &&\r\n      <div>\r\n        <b>My professionals skills</b> : {profile.lookingForAJobDescription}\r\n      </div>\r\n    }\r\n    <div>\r\n      <b>Aboute me</b> : {profile.aboutMe}\r\n    </div>\r\n    <div>\r\n      <b>Contacts</b> : {Object.keys(profile.contacts).map(key => {//Object.keys перебирает все подобьеты profile.contacts\r\n        return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />//с помощью map на каждое имя свойства мы хотим отрисовать Contact с приходящими props contactTitle(приходит свойство key) contactValue(мы обращаемся к контактам и через квадратные скобки прочитаем значение свойства по етому ключу)\r\n      })//обязательно когда map передаем key в Contact так как мы ее используем там\r\n      }\r\n    </div>\r\n  </div>\r\n}\r\n\r\n\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {// пример в документации contactTitle=github, contactValue=required(string)(значение)\r\n  return <div className={classes.contact}><b>{contactTitle}</b>: {contactValue}</div> \r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport classes from './Profile.module.css';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo.jsx';\r\n\r\nconst Profile = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo savePhoto={props.savePhoto}\r\n        IsOwner={props.IsOwner}\r\n        profile={props.profile}\r\n        status={props.status}\r\n        SaveProfile={props.SaveProfile}\r\n        updateStatus={props.updateStatus} />\r\n      <MyPostsContainer />\r\n    </div>)\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport { getStatus, getUserProfile, updateStatus, savePhoto, SaveProfile } from \"../../redux/profile-reducer\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;//сюда приходит наш id из URL\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {//мы заходим единожды в profile и когда меняется url на другой profile компонента не монтируется поетому добавляем componentDidUpdate\r\n\r\n        this.refreshProfile();\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {//компонента меняется каждый раз когда в ней поменялись либо state либо props\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) { //если текущие props не равны приходящим props то срабатывает componentDidUpdate\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // console.log(\"RENDER PROFILE\")\r\n        return (\r\n            <Profile {...this.props}\r\n                savePhoto={this.props.savePhoto}\r\n                IsOwner={!this.props.match.params.userId}//я являюсь владельцем страницы если есть userId(!! двойное отрицание true)\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus} />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    // console.log(\"mapStateToProps\")\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    })\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, SaveProfile }),//все ети данные из UI конектим к business\r\n    withRouter\r\n)(ProfileContainer);//withRouter конектить ProfileContainer к URL"],"names":["props","className","classes","src","message","likesCount","maxLenght10","MaxLengthCreator","AddNewPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","React","postsElements","posts","reverse","map","id","values","addPost","newPostText","connect","state","profilePage","dispatch","addPostActionCreator","MyPosts","useState","editMode","setEditMode","status","setStatus","useEffect","console","log","onDoubleClick","onChange","event","currentTarget","value","autoFocus","onBlur","updateStatus","profile","error","styles","createField","Input","type","Object","keys","contacts","key","ProfileData","IsOwner","goToEditeMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","savePhoto","SaveProfile","Preloader","photos","large","userPhoto","target","files","length","initialValues","FormData","then","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","withRouter"],"sourceRoot":""}