{"version":3,"file":"static/js/16.142538a5.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__uclKr\",\"posts\":\"MyPosts_posts__tK1iR\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__FWGf0\"};","import React from 'react';\r\nimport classes from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n  \r\n  return (\r\n    <div className= { classes.item }>\r\n      <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS_GRnDEllqSKYI4SzrGgy4p7LoVKhsZxdsZQ&usqp=CAU' />\r\n      {props.message}\r\n      <div>\r\n      <span>like</span> { props.likesCount }\r\n      </div>\r\n    </div>)\r\n}\r\n\r\nexport default Post;","import { type } from '@testing-library/user-event/dist/type';\r\nimport React, {Component} from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { addPostActionCreator, updateNewPostTextActionCreator } from '../../../redux/profile-reducer';\r\nimport { MaxLengthCreator, required } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\n\r\n\r\nconst maxLenght10 = MaxLengthCreator(10);\r\n\r\nconst AddNewPostForm = (props) => {\r\n  return <form onSubmit={props.handleSubmit}>\r\n    <div>\r\n      <Field name={\"newPostText\"} component={Textarea} placeholder={\"Post message\"}\r\n        validate={[required, maxLenght10]} />\r\n    </div>\r\n    <div>\r\n      <button>Add post</button>\r\n    </div>\r\n  </form>\r\n\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm({ form: \"ProfileAddNewPostForm\" })(AddNewPostForm)\r\n\r\nconst MyPosts = React.memo(props => {\r\n  \r\n  let postsElements = [...props.posts].reverse().map(posts => <Post message={posts.message} likesCount={posts.likesCount} />)\r\n\r\n  let newPostElement = React.createRef();\r\n\r\n  let onAddPost = (values) => {\r\n    props.addPost(values.newPostText);\r\n  };\r\n  \r\n  return (\r\n    <div className={classes.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <AddNewPostReduxForm onSubmit={onAddPost} />\r\n      <div className={classes.posts}>\r\n        {postsElements}\r\n      </div>\r\n    </div>)\r\n\r\n});\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addPostActionCreator } from '../../../redux/profile-reducer';\r\nimport store from '../../../redux/redux-store';\r\nimport MyPosts from './MyPosts';\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText\r\n  }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      addPost: (newPostText) => {\r\n        dispatch(addPostActionCreator(newPostText));\r\n      }\r\n  }\r\n}\r\n\r\nconst MyPostsContainer = connect (mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\n\r\nexport default MyPostsContainer;","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__q6BVM\"};","import React from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\n\r\n\r\nclass ProfileStatus extends React.Component {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n\r\n        this.setState({\r\n            editMode: true\r\n        });\r\n    }\r\n\r\n    deActivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n        this.props.updateStatus(this.state.status);\r\n    }\r\n\r\n\r\n    onStatusChange = (event) => {\r\n        this.setState({\r\n            status: event.currentTarget.value\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {//prevProps-предыдущий props, prevState - предыдцщий state\r\n        if (prevProps.status !== this.props.status) {//если предыдущий статус не равен новому статусу то мы в setState закидываем новый статус\r\n            this.setState({\r\n                status: this.props.status\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={this.activateEditMode}>{this.props.status || \"--------\"}</span>\r\n                    </div>\r\n                }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deActivateEditMode} value={this.state.status} />\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;","import React, { useEffect, useState } from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {//ProfileStatusWithHooks выполняет сначала render потом useEffect\r\n\r\n    let [editMode, setEditMode] = useState(false);//useState это хук изначальное стартовое значение которого будет false(наподобии локального state)\r\n    let [status, setStatus] = useState(props.status);//useState это хук изначальное стартовое значение которого будет props.status(наподобии локального state)\r\n    //editMode, setEditMode это деструктуризация в которые будет входить значения с useState\r\n\r\n    useEffect(() => {//useEffect выполняется после render (в последнюю очередь)\r\n        setStatus(props.status);//синхронизирует useState(state фактически) и приходящие  props\r\n    }, [props.status] );// если [props.status] изменился запусти useEffect в противном случае если [props.status] не будет useEffect будет запускатся после каждого render\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);//мы сообщаем родителю наверх что у нас статус поменялся\r\n    }\r\n\r\n    const onStatusChange = (event) => {\r\n        setStatus(event.currentTarget.value);//передаем значение для статуса\r\n    }\r\n\r\n    console.log(\"render\")\r\n    return (\r\n        <div>\r\n            {!editMode &&//если editMode(false) показываем span\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || \"--------\"}</span>\r\n                </div>//показывает span\r\n            }\r\n            {editMode &&// если editMode(true) показываем input\r\n                <div>\r\n                    <input onChange={onStatusChange}\r\n                        autoFocus={true}\r\n                        onBlur={deActivateEditMode}\r\n                        value={status} />\r\n                </div>//autoFocus - курсив в строке input, onBlur кликаем курсором на пустом месте и у нас сетается измененый статус в state, onChange обработчик событий, value значение текущего статуса пользователя\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport classes from './ProfileInfo.module.css';\r\nimport ProfileStatus from \"./ProfileStatus\"\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}) => {\r\n  if (!profile) {\r\n    return <Preloader />\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.descriptionBlock}>\r\n        <img src={profile.photos.large} />\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport classes from './Profile.module.css';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo.jsx';\r\n\r\nconst Profile = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n      <MyPostsContainer />\r\n    </div>)\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        // console.log(\"RENDER PROFILE\")\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    // console.log(\"mapStateToProps\")\r\n    return ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n    })\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter\r\n)(ProfileContainer);"],"names":["props","className","classes","src","message","likesCount","maxLenght10","MaxLengthCreator","AddNewPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","React","postsElements","posts","reverse","map","values","addPost","newPostText","connect","state","profilePage","dispatch","addPostActionCreator","MyPosts","useState","editMode","setEditMode","status","setStatus","useEffect","console","log","onDoubleClick","onChange","event","currentTarget","value","autoFocus","onBlur","updateStatus","profile","photos","large","Preloader","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","compose","auth","isAuth","withRouter"],"sourceRoot":""}